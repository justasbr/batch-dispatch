import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

__weights_dict = dict()

def load_weights(weight_file):
    if weight_file == None:
        return

    try:
        weights_dict = np.load(weight_file).item()
    except:
        weights_dict = np.load(weight_file, encoding='bytes').item()

    return weights_dict

def t_relu(layer):
    return F.relu(layer, inplace=True)

class KitModel(nn.Module):

    
    def __init__(self, weight_file):
        super(KitModel, self).__init__()
        global __weights_dict
        __weights_dict = load_weights(weight_file)

        self.conv1 = self.__conv(2, name='conv1', in_channels=3, out_channels=64, kernel_size=(7, 7), stride=(2, 2), groups=1, bias=True)
        self.bn_conv1 = self.__batch_normalization(2, 'bn_conv1', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2a_branch2a = self.__conv(2, name='res2a_branch2a', in_channels=64, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.res2a_branch1 = self.__conv(2, name='res2a_branch1', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn2a_branch2a = self.__batch_normalization(2, 'bn2a_branch2a', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.bn2a_branch1 = self.__batch_normalization(2, 'bn2a_branch1', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2a_branch2b = self.__conv(2, name='res2a_branch2b', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn2a_branch2b = self.__batch_normalization(2, 'bn2a_branch2b', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2a_branch2c = self.__conv(2, name='res2a_branch2c', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn2a_branch2c = self.__batch_normalization(2, 'bn2a_branch2c', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2b_branch2a = self.__conv(2, name='res2b_branch2a', in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn2b_branch2a = self.__batch_normalization(2, 'bn2b_branch2a', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2b_branch2b = self.__conv(2, name='res2b_branch2b', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn2b_branch2b = self.__batch_normalization(2, 'bn2b_branch2b', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2b_branch2c = self.__conv(2, name='res2b_branch2c', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn2b_branch2c = self.__batch_normalization(2, 'bn2b_branch2c', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2c_branch2a = self.__conv(2, name='res2c_branch2a', in_channels=256, out_channels=64, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn2c_branch2a = self.__batch_normalization(2, 'bn2c_branch2a', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2c_branch2b = self.__conv(2, name='res2c_branch2b', in_channels=64, out_channels=64, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn2c_branch2b = self.__batch_normalization(2, 'bn2c_branch2b', num_features = 64, eps = 0.0010000000474974513, momentum = 0.0)
        self.res2c_branch2c = self.__conv(2, name='res2c_branch2c', in_channels=64, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn2c_branch2c = self.__batch_normalization(2, 'bn2c_branch2c', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3a_branch2a = self.__conv(2, name='res3a_branch2a', in_channels=256, out_channels=128, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=True)
        self.res3a_branch1 = self.__conv(2, name='res3a_branch1', in_channels=256, out_channels=512, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=True)
        self.bn3a_branch2a = self.__batch_normalization(2, 'bn3a_branch2a', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.bn3a_branch1 = self.__batch_normalization(2, 'bn3a_branch1', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3a_branch2b = self.__conv(2, name='res3a_branch2b', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn3a_branch2b = self.__batch_normalization(2, 'bn3a_branch2b', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3a_branch2c = self.__conv(2, name='res3a_branch2c', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3a_branch2c = self.__batch_normalization(2, 'bn3a_branch2c', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3b_branch2a = self.__conv(2, name='res3b_branch2a', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3b_branch2a = self.__batch_normalization(2, 'bn3b_branch2a', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3b_branch2b = self.__conv(2, name='res3b_branch2b', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn3b_branch2b = self.__batch_normalization(2, 'bn3b_branch2b', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3b_branch2c = self.__conv(2, name='res3b_branch2c', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3b_branch2c = self.__batch_normalization(2, 'bn3b_branch2c', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3c_branch2a = self.__conv(2, name='res3c_branch2a', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3c_branch2a = self.__batch_normalization(2, 'bn3c_branch2a', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3c_branch2b = self.__conv(2, name='res3c_branch2b', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn3c_branch2b = self.__batch_normalization(2, 'bn3c_branch2b', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3c_branch2c = self.__conv(2, name='res3c_branch2c', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3c_branch2c = self.__batch_normalization(2, 'bn3c_branch2c', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3d_branch2a = self.__conv(2, name='res3d_branch2a', in_channels=512, out_channels=128, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3d_branch2a = self.__batch_normalization(2, 'bn3d_branch2a', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3d_branch2b = self.__conv(2, name='res3d_branch2b', in_channels=128, out_channels=128, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn3d_branch2b = self.__batch_normalization(2, 'bn3d_branch2b', num_features = 128, eps = 0.0010000000474974513, momentum = 0.0)
        self.res3d_branch2c = self.__conv(2, name='res3d_branch2c', in_channels=128, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn3d_branch2c = self.__batch_normalization(2, 'bn3d_branch2c', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4a_branch2a = self.__conv(2, name='res4a_branch2a', in_channels=512, out_channels=256, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=True)
        self.res4a_branch1 = self.__conv(2, name='res4a_branch1', in_channels=512, out_channels=1024, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=True)
        self.bn4a_branch2a = self.__batch_normalization(2, 'bn4a_branch2a', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.bn4a_branch1 = self.__batch_normalization(2, 'bn4a_branch1', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4a_branch2b = self.__conv(2, name='res4a_branch2b', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn4a_branch2b = self.__batch_normalization(2, 'bn4a_branch2b', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4a_branch2c = self.__conv(2, name='res4a_branch2c', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4a_branch2c = self.__batch_normalization(2, 'bn4a_branch2c', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4b_branch2a = self.__conv(2, name='res4b_branch2a', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4b_branch2a = self.__batch_normalization(2, 'bn4b_branch2a', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4b_branch2b = self.__conv(2, name='res4b_branch2b', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn4b_branch2b = self.__batch_normalization(2, 'bn4b_branch2b', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4b_branch2c = self.__conv(2, name='res4b_branch2c', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4b_branch2c = self.__batch_normalization(2, 'bn4b_branch2c', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4c_branch2a = self.__conv(2, name='res4c_branch2a', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4c_branch2a = self.__batch_normalization(2, 'bn4c_branch2a', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4c_branch2b = self.__conv(2, name='res4c_branch2b', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn4c_branch2b = self.__batch_normalization(2, 'bn4c_branch2b', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4c_branch2c = self.__conv(2, name='res4c_branch2c', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4c_branch2c = self.__batch_normalization(2, 'bn4c_branch2c', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4d_branch2a = self.__conv(2, name='res4d_branch2a', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4d_branch2a = self.__batch_normalization(2, 'bn4d_branch2a', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4d_branch2b = self.__conv(2, name='res4d_branch2b', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn4d_branch2b = self.__batch_normalization(2, 'bn4d_branch2b', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4d_branch2c = self.__conv(2, name='res4d_branch2c', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4d_branch2c = self.__batch_normalization(2, 'bn4d_branch2c', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4e_branch2a = self.__conv(2, name='res4e_branch2a', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4e_branch2a = self.__batch_normalization(2, 'bn4e_branch2a', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4e_branch2b = self.__conv(2, name='res4e_branch2b', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn4e_branch2b = self.__batch_normalization(2, 'bn4e_branch2b', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4e_branch2c = self.__conv(2, name='res4e_branch2c', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4e_branch2c = self.__batch_normalization(2, 'bn4e_branch2c', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4f_branch2a = self.__conv(2, name='res4f_branch2a', in_channels=1024, out_channels=256, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4f_branch2a = self.__batch_normalization(2, 'bn4f_branch2a', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4f_branch2b = self.__conv(2, name='res4f_branch2b', in_channels=256, out_channels=256, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn4f_branch2b = self.__batch_normalization(2, 'bn4f_branch2b', num_features = 256, eps = 0.0010000000474974513, momentum = 0.0)
        self.res4f_branch2c = self.__conv(2, name='res4f_branch2c', in_channels=256, out_channels=1024, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn4f_branch2c = self.__batch_normalization(2, 'bn4f_branch2c', num_features = 1024, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5a_branch2a = self.__conv(2, name='res5a_branch2a', in_channels=1024, out_channels=512, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=True)
        self.res5a_branch1 = self.__conv(2, name='res5a_branch1', in_channels=1024, out_channels=2048, kernel_size=(1, 1), stride=(2, 2), groups=1, bias=True)
        self.bn5a_branch2a = self.__batch_normalization(2, 'bn5a_branch2a', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.bn5a_branch1 = self.__batch_normalization(2, 'bn5a_branch1', num_features = 2048, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5a_branch2b = self.__conv(2, name='res5a_branch2b', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn5a_branch2b = self.__batch_normalization(2, 'bn5a_branch2b', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5a_branch2c = self.__conv(2, name='res5a_branch2c', in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn5a_branch2c = self.__batch_normalization(2, 'bn5a_branch2c', num_features = 2048, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5b_branch2a = self.__conv(2, name='res5b_branch2a', in_channels=2048, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn5b_branch2a = self.__batch_normalization(2, 'bn5b_branch2a', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5b_branch2b = self.__conv(2, name='res5b_branch2b', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn5b_branch2b = self.__batch_normalization(2, 'bn5b_branch2b', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5b_branch2c = self.__conv(2, name='res5b_branch2c', in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn5b_branch2c = self.__batch_normalization(2, 'bn5b_branch2c', num_features = 2048, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5c_branch2a = self.__conv(2, name='res5c_branch2a', in_channels=2048, out_channels=512, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn5c_branch2a = self.__batch_normalization(2, 'bn5c_branch2a', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5c_branch2b = self.__conv(2, name='res5c_branch2b', in_channels=512, out_channels=512, kernel_size=(3, 3), stride=(1, 1), groups=1, bias=True)
        self.bn5c_branch2b = self.__batch_normalization(2, 'bn5c_branch2b', num_features = 512, eps = 0.0010000000474974513, momentum = 0.0)
        self.res5c_branch2c = self.__conv(2, name='res5c_branch2c', in_channels=512, out_channels=2048, kernel_size=(1, 1), stride=(1, 1), groups=1, bias=True)
        self.bn5c_branch2c = self.__batch_normalization(2, 'bn5c_branch2c', num_features = 2048, eps = 0.0010000000474974513, momentum = 0.0)
        self.fc1000 = self.__dense(name = 'fc1000', in_features = 2048, out_features = 1000, bias = True)

    def forward(self, x):
        conv1_pad       = F.pad(x, (2, 3, 2, 3))
        conv1           = self.conv1(conv1_pad)
        bn_conv1        = self.bn_conv1(conv1)
        activation_1    = t_relu(bn_conv1)
        max_pooling2d_1 = F.max_pool2d(activation_1, kernel_size=(3, 3), stride=(2, 2))
        res2a_branch2a  = self.res2a_branch2a(max_pooling2d_1)
        res2a_branch1   = self.res2a_branch1(max_pooling2d_1)
        bn2a_branch2a   = self.bn2a_branch2a(res2a_branch2a)
        bn2a_branch1    = self.bn2a_branch1(res2a_branch1)
        activation_2    = t_relu(bn2a_branch2a)
        res2a_branch2b_pad = F.pad(activation_2, (1, 1, 1, 1))
        res2a_branch2b  = self.res2a_branch2b(res2a_branch2b_pad)
        bn2a_branch2b   = self.bn2a_branch2b(res2a_branch2b)
        activation_3    = t_relu(bn2a_branch2b)
        res2a_branch2c  = self.res2a_branch2c(activation_3)
        bn2a_branch2c   = self.bn2a_branch2c(res2a_branch2c)
        add_1           = bn2a_branch2c+ bn2a_branch1
        activation_4    = t_relu(add_1)
        res2b_branch2a  = self.res2b_branch2a(activation_4)
        bn2b_branch2a   = self.bn2b_branch2a(res2b_branch2a)
        activation_5    = t_relu(bn2b_branch2a)
        res2b_branch2b_pad = F.pad(activation_5, (1, 1, 1, 1))
        res2b_branch2b  = self.res2b_branch2b(res2b_branch2b_pad)
        bn2b_branch2b   = self.bn2b_branch2b(res2b_branch2b)
        activation_6    = t_relu(bn2b_branch2b)
        res2b_branch2c  = self.res2b_branch2c(activation_6)
        bn2b_branch2c   = self.bn2b_branch2c(res2b_branch2c)
        add_2           = bn2b_branch2c+ activation_4
        activation_7    = t_relu(add_2)
        res2c_branch2a  = self.res2c_branch2a(activation_7)
        bn2c_branch2a   = self.bn2c_branch2a(res2c_branch2a)
        activation_8    = t_relu(bn2c_branch2a)
        res2c_branch2b_pad = F.pad(activation_8, (1, 1, 1, 1))
        res2c_branch2b  = self.res2c_branch2b(res2c_branch2b_pad)
        bn2c_branch2b   = self.bn2c_branch2b(res2c_branch2b)
        activation_9    = t_relu(bn2c_branch2b)
        res2c_branch2c  = self.res2c_branch2c(activation_9)
        bn2c_branch2c   = self.bn2c_branch2c(res2c_branch2c)
        add_3           = bn2c_branch2c+ activation_7
        activation_10   = t_relu(add_3)
        res3a_branch2a  = self.res3a_branch2a(activation_10)
        res3a_branch1   = self.res3a_branch1(activation_10)
        bn3a_branch2a   = self.bn3a_branch2a(res3a_branch2a)
        bn3a_branch1    = self.bn3a_branch1(res3a_branch1)
        activation_11   = t_relu(bn3a_branch2a)
        res3a_branch2b_pad = F.pad(activation_11, (1, 1, 1, 1))
        res3a_branch2b  = self.res3a_branch2b(res3a_branch2b_pad)
        bn3a_branch2b   = self.bn3a_branch2b(res3a_branch2b)
        activation_12   = t_relu(bn3a_branch2b)
        res3a_branch2c  = self.res3a_branch2c(activation_12)
        bn3a_branch2c   = self.bn3a_branch2c(res3a_branch2c)
        add_4           = bn3a_branch2c+ bn3a_branch1
        activation_13   = t_relu(add_4)
        res3b_branch2a  = self.res3b_branch2a(activation_13)
        bn3b_branch2a   = self.bn3b_branch2a(res3b_branch2a)
        activation_14   = t_relu(bn3b_branch2a)
        res3b_branch2b_pad = F.pad(activation_14, (1, 1, 1, 1))
        res3b_branch2b  = self.res3b_branch2b(res3b_branch2b_pad)
        bn3b_branch2b   = self.bn3b_branch2b(res3b_branch2b)
        activation_15   = t_relu(bn3b_branch2b)
        res3b_branch2c  = self.res3b_branch2c(activation_15)
        bn3b_branch2c   = self.bn3b_branch2c(res3b_branch2c)
        add_5           = bn3b_branch2c+ activation_13
        activation_16   = t_relu(add_5)
        res3c_branch2a  = self.res3c_branch2a(activation_16)
        bn3c_branch2a   = self.bn3c_branch2a(res3c_branch2a)
        activation_17   = t_relu(bn3c_branch2a)
        res3c_branch2b_pad = F.pad(activation_17, (1, 1, 1, 1))
        res3c_branch2b  = self.res3c_branch2b(res3c_branch2b_pad)
        bn3c_branch2b   = self.bn3c_branch2b(res3c_branch2b)
        activation_18   = t_relu(bn3c_branch2b)
        res3c_branch2c  = self.res3c_branch2c(activation_18)
        bn3c_branch2c   = self.bn3c_branch2c(res3c_branch2c)
        add_6           = bn3c_branch2c+ activation_16
        activation_19   = t_relu(add_6)
        res3d_branch2a  = self.res3d_branch2a(activation_19)
        bn3d_branch2a   = self.bn3d_branch2a(res3d_branch2a)
        activation_20   = t_relu(bn3d_branch2a)
        res3d_branch2b_pad = F.pad(activation_20, (1, 1, 1, 1))
        res3d_branch2b  = self.res3d_branch2b(res3d_branch2b_pad)
        bn3d_branch2b   = self.bn3d_branch2b(res3d_branch2b)
        activation_21   = t_relu(bn3d_branch2b)
        res3d_branch2c  = self.res3d_branch2c(activation_21)
        bn3d_branch2c   = self.bn3d_branch2c(res3d_branch2c)
        add_7           = bn3d_branch2c+ activation_19
        activation_22   = t_relu(add_7)
        res4a_branch2a  = self.res4a_branch2a(activation_22)
        res4a_branch1   = self.res4a_branch1(activation_22)
        bn4a_branch2a   = self.bn4a_branch2a(res4a_branch2a)
        bn4a_branch1    = self.bn4a_branch1(res4a_branch1)
        activation_23   = t_relu(bn4a_branch2a)
        res4a_branch2b_pad = F.pad(activation_23, (1, 1, 1, 1))
        res4a_branch2b  = self.res4a_branch2b(res4a_branch2b_pad)
        bn4a_branch2b   = self.bn4a_branch2b(res4a_branch2b)
        activation_24   = t_relu(bn4a_branch2b)
        res4a_branch2c  = self.res4a_branch2c(activation_24)
        bn4a_branch2c   = self.bn4a_branch2c(res4a_branch2c)
        add_8           = bn4a_branch2c+ bn4a_branch1
        activation_25   = t_relu(add_8)
        res4b_branch2a  = self.res4b_branch2a(activation_25)
        bn4b_branch2a   = self.bn4b_branch2a(res4b_branch2a)
        activation_26   = t_relu(bn4b_branch2a)
        res4b_branch2b_pad = F.pad(activation_26, (1, 1, 1, 1))
        res4b_branch2b  = self.res4b_branch2b(res4b_branch2b_pad)
        bn4b_branch2b   = self.bn4b_branch2b(res4b_branch2b)
        activation_27   = t_relu(bn4b_branch2b)
        res4b_branch2c  = self.res4b_branch2c(activation_27)
        bn4b_branch2c   = self.bn4b_branch2c(res4b_branch2c)
        add_9           = bn4b_branch2c+ activation_25
        activation_28   = t_relu(add_9)
        res4c_branch2a  = self.res4c_branch2a(activation_28)
        bn4c_branch2a   = self.bn4c_branch2a(res4c_branch2a)
        activation_29   = t_relu(bn4c_branch2a)
        res4c_branch2b_pad = F.pad(activation_29, (1, 1, 1, 1))
        res4c_branch2b  = self.res4c_branch2b(res4c_branch2b_pad)
        bn4c_branch2b   = self.bn4c_branch2b(res4c_branch2b)
        activation_30   = t_relu(bn4c_branch2b)
        res4c_branch2c  = self.res4c_branch2c(activation_30)
        bn4c_branch2c   = self.bn4c_branch2c(res4c_branch2c)
        add_10          = bn4c_branch2c+ activation_28
        activation_31   = t_relu(add_10)
        res4d_branch2a  = self.res4d_branch2a(activation_31)
        bn4d_branch2a   = self.bn4d_branch2a(res4d_branch2a)
        activation_32   = t_relu(bn4d_branch2a)
        res4d_branch2b_pad = F.pad(activation_32, (1, 1, 1, 1))
        res4d_branch2b  = self.res4d_branch2b(res4d_branch2b_pad)
        bn4d_branch2b   = self.bn4d_branch2b(res4d_branch2b)
        activation_33   = t_relu(bn4d_branch2b)
        res4d_branch2c  = self.res4d_branch2c(activation_33)
        bn4d_branch2c   = self.bn4d_branch2c(res4d_branch2c)
        add_11          = bn4d_branch2c+ activation_31
        activation_34   = t_relu(add_11)
        res4e_branch2a  = self.res4e_branch2a(activation_34)
        bn4e_branch2a   = self.bn4e_branch2a(res4e_branch2a)
        activation_35   = t_relu(bn4e_branch2a)
        res4e_branch2b_pad = F.pad(activation_35, (1, 1, 1, 1))
        res4e_branch2b  = self.res4e_branch2b(res4e_branch2b_pad)
        bn4e_branch2b   = self.bn4e_branch2b(res4e_branch2b)
        activation_36   = t_relu(bn4e_branch2b)
        res4e_branch2c  = self.res4e_branch2c(activation_36)
        bn4e_branch2c   = self.bn4e_branch2c(res4e_branch2c)
        add_12          = bn4e_branch2c+ activation_34
        activation_37   = t_relu(add_12)
        res4f_branch2a  = self.res4f_branch2a(activation_37)
        bn4f_branch2a   = self.bn4f_branch2a(res4f_branch2a)
        activation_38   = t_relu(bn4f_branch2a)
        res4f_branch2b_pad = F.pad(activation_38, (1, 1, 1, 1))
        res4f_branch2b  = self.res4f_branch2b(res4f_branch2b_pad)
        bn4f_branch2b   = self.bn4f_branch2b(res4f_branch2b)
        activation_39   = t_relu(bn4f_branch2b)
        res4f_branch2c  = self.res4f_branch2c(activation_39)
        bn4f_branch2c   = self.bn4f_branch2c(res4f_branch2c)
        add_13          = bn4f_branch2c+ activation_37
        activation_40   = t_relu(add_13)
        res5a_branch2a  = self.res5a_branch2a(activation_40)
        res5a_branch1   = self.res5a_branch1(activation_40)
        bn5a_branch2a   = self.bn5a_branch2a(res5a_branch2a)
        bn5a_branch1    = self.bn5a_branch1(res5a_branch1)
        activation_41   = t_relu(bn5a_branch2a)
        res5a_branch2b_pad = F.pad(activation_41, (1, 1, 1, 1))
        res5a_branch2b  = self.res5a_branch2b(res5a_branch2b_pad)
        bn5a_branch2b   = self.bn5a_branch2b(res5a_branch2b)
        activation_42   = t_relu(bn5a_branch2b)
        res5a_branch2c  = self.res5a_branch2c(activation_42)
        bn5a_branch2c   = self.bn5a_branch2c(res5a_branch2c)
        add_14          = bn5a_branch2c+ bn5a_branch1
        activation_43   = t_relu(add_14)
        res5b_branch2a  = self.res5b_branch2a(activation_43)
        bn5b_branch2a   = self.bn5b_branch2a(res5b_branch2a)
        activation_44   = t_relu(bn5b_branch2a)
        res5b_branch2b_pad = F.pad(activation_44, (1, 1, 1, 1))
        res5b_branch2b  = self.res5b_branch2b(res5b_branch2b_pad)
        bn5b_branch2b   = self.bn5b_branch2b(res5b_branch2b)
        activation_45   = t_relu(bn5b_branch2b)
        res5b_branch2c  = self.res5b_branch2c(activation_45)
        bn5b_branch2c   = self.bn5b_branch2c(res5b_branch2c)
        add_15          = bn5b_branch2c+ activation_43
        activation_46   = t_relu(add_15)
        res5c_branch2a  = self.res5c_branch2a(activation_46)
        bn5c_branch2a   = self.bn5c_branch2a(res5c_branch2a)
        activation_47   = t_relu(bn5c_branch2a)
        res5c_branch2b_pad = F.pad(activation_47, (1, 1, 1, 1))
        res5c_branch2b  = self.res5c_branch2b(res5c_branch2b_pad)
        bn5c_branch2b   = self.bn5c_branch2b(res5c_branch2b)
        activation_48   = t_relu(bn5c_branch2b)
        res5c_branch2c  = self.res5c_branch2c(activation_48)
        bn5c_branch2c   = self.bn5c_branch2c(res5c_branch2c)
        add_16          = bn5c_branch2c+ activation_46
        activation_49   = t_relu(add_16)
        avg_pool        = F.avg_pool2d(activation_49, kernel_size=(7, 7), stride=(7, 7))
        flatten_1       = avg_pool.view(avg_pool.size(0), -1)
        fc1000          = self.fc1000(flatten_1)
        fc1000_activation = F.softmax(fc1000)
        return fc1000_activation


    @staticmethod
    def __conv(dim, name, **kwargs):
        if   dim == 1:  layer = nn.Conv1d(**kwargs)
        elif dim == 2:  layer = nn.Conv2d(**kwargs)
        elif dim == 3:  layer = nn.Conv3d(**kwargs)
        else:           raise NotImplementedError()

        layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['weights']))
        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        return layer

    @staticmethod
    def __batch_normalization(dim, name, **kwargs):
        if   dim == 1:  layer = nn.BatchNorm1d(**kwargs)
        elif dim == 2:  layer = nn.BatchNorm2d(**kwargs)
        elif dim == 3:  layer = nn.BatchNorm3d(**kwargs)
        else:           raise NotImplementedError()

        if 'scale' in __weights_dict[name]:
            layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['scale']))
        else:
            layer.weight.data.fill_(1)

        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        else:
            layer.bias.data.fill_(0)

        layer.state_dict()['running_mean'].copy_(torch.from_numpy(__weights_dict[name]['mean']))
        layer.state_dict()['running_var'].copy_(torch.from_numpy(__weights_dict[name]['var']))
        return layer

    @staticmethod
    def __dense(name, **kwargs):
        layer = nn.Linear(**kwargs)
        layer.state_dict()['weight'].copy_(torch.from_numpy(__weights_dict[name]['weights']))
        if 'bias' in __weights_dict[name]:
            layer.state_dict()['bias'].copy_(torch.from_numpy(__weights_dict[name]['bias']))
        return layer
